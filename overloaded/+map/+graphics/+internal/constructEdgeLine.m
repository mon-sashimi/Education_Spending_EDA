function hEdgeLine = constructEdgeLine(hPatch,xdata,ydata,zdata)
% Construct an "edge line" object to be associated with a patch object.
% Set up listeners and state information to re-direct certain property
% settings.

% Copyright 2009-2014 The MathWorks, Inc.

parent = get(hPatch, 'Parent');
defaultColor = [0 0 0]; % Black
if nargin < 4
    hEdgeLine = line('Parent', parent, 'XData', xdata, 'YData', ydata, ...
        'Color',defaultColor,'Visible','off','HandleVisibility','off');
else
    hEdgeLine = line('Parent', parent, ...
        'XData', xdata, 'YData', ydata, 'Zdata', zdata, ...
        'Color',defaultColor,'Visible','off','HandleVisibility','off');
end

% Provide access to the edge line.
setappdata(hPatch, 'EdgeLine', hEdgeLine)

% Ensure that the edge line is deleted when the patch is deleted.
set(hPatch,'DeleteFcn',@deleteEdgeLineObject)

% Provide a callback to copy the edge line when using copyobj with
% hPatch.
set(hPatch, 'CreateFcn', @copyEdgeLine)

% Add listeners to forward calls from hPatch to the edge line.
addListeners(hPatch, hEdgeLine);

    function deleteEdgeLine(hSrc,evt) %#ok<DEFNU>
        % Needed to open figures from R2013b and earlier.
        deleteEdgeLineObject(hSrc,evt)
    end
end

%--------------------------------------------------------------------------

function deleteEdgeLine(hPatch, evt) %#ok<DEFNU>
    % Needed to open figures from R2014a.
    deleteEdgeLineObject(hPatch, evt)
end

%--------------------------------------------------------------------------

function deleteEdgeLineObject(hPatch, ~)
% Delete the edge line belonging to hPatch. 

if ishghandle(hPatch, 'patch') && isappdata(hPatch, 'EdgeLine')
    hEdgeLine = getappdata(hPatch, 'EdgeLine');
    if ishghandle(hEdgeLine, 'line') ...
            && isequal(ancestor(hEdgeLine, 'axes'), ancestor(hPatch,'axes'))
        delete(hEdgeLine)
        rmappdata(hPatch, 'EdgeLine')
    end
end
end

%--------------------------------------------------------------------------

function copyEdgeLine(hPatch, ~)
% If the edge line in the hPatch appdata is in a different axes than
% hPatch, copy it into the axes ancestor of hPatch and set the appdata.
% These actions will be performed when copyobj is called but not when
% openfig is called. Set listeners in both cases.

if ishghandle(hPatch, 'patch') && isappdata(hPatch, 'EdgeLine')
    hEdgeLine = getappdata(hPatch, 'EdgeLine');
    if ishghandle(hEdgeLine, 'line')
        ax = ancestor(hPatch, 'axes');
        if ~handleInAxes(hEdgeLine, ax)
            hCopy = copyobj(hEdgeLine, ax);
            setappdata(hPatch, 'EdgeLine', hCopy);
            addListeners(hPatch, hCopy)
        else
            % openfig was called. The appdata in hPatch is saved, but
            % listeners are not saved to the file. Ensure that the
            % listeners are enabled, but only if we are sure that hPatch is
            % generated by mappolygon.
            if isappdata(hPatch, 'EdgeLineListnersEnabled')
                addListeners(hPatch, hEdgeLine);
            end
        end
    end
end
end

%--------------------------------------------------------------------------

function tf = handleInAxes(hSrc, ax)
% Determine whether hSrc is contained in ax.

ch = findall(ax, 'Type', get(hSrc(1), 'Type'));
tf = false(1, length(ch));
for k = 1:length(ch)
    if isscalar(hSrc) && isequal(hSrc, ch(k))
        tf(k) = true;
    else
        for n = 1:length(hSrc)
            if isequal(hSrc(n), ch(k))
                tf(k) = true;
                break
            end
        end
    end
end

% If any tf is true, then hSrc is already contained in ax.
tf = any(tf);

end

%--------------------------------------------------------------------------

function addListeners(hPatch, hEdgeLine)

% Except for the first one (which forces the patch EdgeAlpha property
% to remain at a value of 1), each listener has a callback that re-maps a
% certain patch property to an edge line property.

addlistener(hPatch, 'EdgeAlpha',       'PostSet', @setEdgeAlpha);
addlistener(hPatch, 'EdgeColor',       'PostSet', @setEdgeColor);
addlistener(hPatch, 'LineWidth',       'PostSet', @setEdgeLineProps);
addlistener(hPatch, 'LineStyle',       'PostSet', @setEdgeLineProps);
addlistener(hPatch, 'Visible',         'PostSet', @setEdgeLineProps);
addlistener(hPatch, 'Parent',          'PostSet', @setEdgeLineProps);
addlistener(hPatch, 'Marker',          'PostSet', @setMarkerProps);
addlistener(hPatch, 'MarkerEdgeColor', 'PostSet', @setMarkerProps);
addlistener(hPatch, 'MarkerFaceColor', 'PostSet', @setMarkerProps);
addlistener(hPatch, 'MarkerSize',      'PostSet', @setMarkerProps);
addlistener(hPatch, 'Vertices',        'PostSet', @setZData);

% Assign appdata to inform that listeners are set
setappdata(hPatch, 'EdgeLineListnersEnabled', true);

% Keep some state information to help the listener callbacks work.
update.EdgeAlpha = true;
update.EdgeLineColor = true;
update.MarkerProps = true;

    %------------------- nested callback functions ------------------
    
    function setEdgeAlpha(hSrc,evnt) %#ok<INUSD>
        % Ensure that the 'EdgeAlpha' patch property is always unity.
        if update.EdgeAlpha
            update.EdgeAlpha = false;
            set(hPatch,'EdgeAlpha',1)
        end
        update.EdgeAlpha = true;
    end

    function setEdgeColor(hSrc,evnt) %#ok<INUSL>
        % Apply the 'EdgeColor' value to the edge line rather
        % than to the edge of every face in the patch.
        if update.EdgeLineColor
            color = evnt.AffectedObject.EdgeColor;
            if ~any(strncmpi(color,{'flat','interp'},numel(color)))
                % Filter out color values that match 'flat' or 'interp'.
                % These values can used to set the EdgeColor property of
                % a patch but not the Color property of a line.
                set(hEdgeLine, 'Color', color)
            end
            update.EdgeLineColor = false;
            set(hPatch,'EdgeColor','none')
        end
        update.EdgeLineColor = true;
    end

    function setEdgeLineProps(hSrc,evnt)
        % Apply 'LineWidth','LineStyle', 'Visible', and 'Parent' property
        % settings to both the patch to the edge line.
        h = evnt.AffectedObject;
        set(hEdgeLine, hSrc.Name, get(h, hSrc.Name))
    end

    function setMarkerProps(hSrc,evnt)
        % Remap marker properties from the patch to the edge line.
        if update.MarkerProps
            h = evnt.AffectedObject;
            set(hEdgeLine, hSrc.Name, get(h, hSrc.Name))
            update.MarkerProps = false;
            set(hPatch,'Marker','none')
        end
        update.MarkerProps = true;
    end

    function setZData(~,~)
        v = get(hPatch, 'Vertices');
        xdata = get(hEdgeLine,'XData');
        if ~isempty(v) && (size(v,2) == 3) && ~isempty(xdata)
            % The vertex array has 3 columns.  The third column should be
            % uniform in value.  Take the first element from the third
            % column and use it to set the ZData of the edge line.
            zdata = v(1,3) + zeros(size(xdata));
            zdata(isnan(xdata)) = NaN;
            set(hEdgeLine,'ZData',zdata)
        end
    end
end
