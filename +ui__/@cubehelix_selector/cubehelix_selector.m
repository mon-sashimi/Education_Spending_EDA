classdef cubehelix_selector < matlab.mixin.SetGetExactNames
   %CUBEHELIX_SELECTOR  UI Class to get desired cubehelix parameters
   %
   %  obj = ui__.cubehelix_selector();
   %
   %  See: gfx__.cubehelix  
   %     Matlab code for cubehelix by: 
   %        - Stephen Cobeldick; 
   %     Original paper for CubeHelix concept: 
   %        - http://astron-soc.in/bulletin/11June/289392011.pdf
   
   % Public, Dependent property: output colormap (to be displayed also)
   properties (Dependent,Access=public)
      cm  % Current colormap values
   end
   
   % Public properties for `cubehelix` function mainly
   properties (Dependent,Access=public)
      N            % Number of rows in returned color map
      start        % Direction of predominant colour deviation from black at start of color scheme
      rots         % Number of rotations through space 
      sat          % Saturation
      gamma        % Gamma for histogram
      irange       % Intensity level of colormap ends
      domain       % Sampling window for CubeHelix
   end
   
   % Protected container properties for dependent variables
   properties (Hidden,Access=protected)
      N_      (1,1) double  = 256        % Number of rows in returned color map
      start_  (1,1) double  = 0.5        % Direction of predominant colour deviation from black at start of color scheme
      rots_   (1,1) double  = -1.5       % Number of rotations through space 
      sat_    (1,1) double  = 1          % Saturation
      gamma_  (1,1) double  = 1          % Gamma for histogram
      irange_ (1,2) double  = [0.2, 0.8] % intensity level of colormap ends
      domain_ (1,2) double  = [0.3, 0.7] % sampling window for CubeHelix
   end
   
   properties (Hidden,Access=public)
      CM_Image       % colormap image
      N_Slider       % Slider for # of colormap rows
      N_Edit         % Edit window for # of colormap rows
      Start_Slider   % Slider for start direction from Black for colormap
      Start_Edit     % Edit for Start
      Rots_Slider    % Slider for # rotations to make
      Rots_Edit      % Editbox for # rotations to make
      Sat_Slider     % Slider for saturation level
      Sat_Edit       % Editbox for saturation level 
      Gamma_Slider   % Slider to adjust gamma
      Gamma_Edit     % Editbox for adjusting gamma
      IRange_Edit_Low      % Editbox for setting low end of intensity range
      IRange_Edit_High     % Editbox for setting hi end of intensity range
      Domain_Edit_Low      % Editbox for low end of domain
      Domain_Edit_High     % Editbox for low end of domain
   end
   
   % Graphics properties
   properties (Access=private)
      Close_Button_        % Handle to Close uicontrol pushbutton
      Export_Button_       % Handle to Export uicontrol pushbutton
      Figure_              % Figure handle to ui figure
   end
   
   properties (GetAccess=private,SetAccess=immutable)
      BeingCreated = true;
   end
   
   % Constructor
   methods (Access=public)
      function obj = cubehelix_selector(varargin)
         %CUBEHELIX_SELECTOR Construct CUBEHELIX_SELECTOR user interface
         %
         %  obj = ui__.cubehelix_selector();
         %  obj =
         %     ui__.cubehelix_selector(start,rots,sat,gamma,irange,domain);
         %  obj = ui__.cubehelix_selector([start,rots,sat,gamma],...);
         
         update(obj,varargin{:});
         
         pos = ui__.getSecondMonitorPosition(...
            'Normalized',[0.05,0.65,0.65,0.15]);
         obj.Figure_ = figure(...
            'Name','CubeHelix Colormap Selector',...
            'Units','Normalized',...
            'Color',[0.25 0.25 0.25],...
            'NumberTitle','off',...
            'MenuBar','none',...
            'ToolBar','none',...
            'Position',pos, ...
            'DeleteFcn',@(~,~)obj.delete...
            );
         
         obj.Close_Button_ = uicontrol(obj.Figure_,...
            'Style','Pushbutton',...
            'BackgroundColor','k',...
            'ForegroundColor','w',...
            'FontName','Arial',...
            'FontWeight','bold',...
            'FontSize',13,...
            'String','Close',...
            'Units','Normalized',...
            'Position',[0.05 0.05 0.15 0.15],...
            'Callback',@(~,~)obj.delete);
         
         obj.Export_Button_ = uicontrol(obj.Figure_,...
            'Style','Pushbutton',...
            'BackgroundColor',[0.2 0.2 0.8],...
            'ForegroundColor',[0.95 0.95 0.95],...
            'FontName','Arial',...
            'FontWeight','bold',...
            'FontSize',13,...
            'String','Export',...
            'Units','Normalized',...
            'Position',[0.05 0.25 0.15 0.15],...
            'Callback',@(~,~)obj.export);
         
         ax = axes(obj.Figure_,...
            'Units','Normalized',...
            'NextPlot','add',...
            'XColor','none',...
            'YColor','none',...
            'Color','none',...
            'Position',[0.05 0.75 0.9 0.20]);
         
         obj.CM_Image = imagesc(ax,1:obj.N,1,zeros(1,obj.N,3));
         args = {...
            obj.N_,...
            obj.start_,...
            obj.rots_,...
            obj.sat_,...
            obj.gamma_,...
            obj.irange_,...
            obj.domain_...
            };
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
         
         % % Create Sliders for scalar parameters % %
         
         uicontrol(obj.Figure_,...
            'Style','text',...
            'BackgroundColor',[0.25 0.25 0.25],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'String','N:',...
            'Units','Normalized',...
            'Position',[0.21 0.05 0.04 0.10]);
         
         obj.N_Slider = uicontrol(obj.Figure_,...
            'Style','slider',...
            'Max',1024,...
            'Min',1,...
            'Value',obj.N_,...
            'SliderStep',[1/1023 10/1023],...
            'Units','Normalized',...
            'Position',[0.25 0.05 0.25 0.10],...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','N_',...
               'source','Value',...
               'fcn',@(val)round(val),...
               'object',...
                  struct(...
                     'name','N_Edit',...
                     'prop','String',...
                     'source','Value',...
                     'fcn',@(val)num2str(val))));
                  
         obj.N_Edit = uicontrol(obj.Figure_,...
            'Style','edit',...
            'BackgroundColor',[0.9 0.9 0.9],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'Units','Normalized',...
            'Position',[0.55 0.05 0.15 0.10],...
            'String',num2str(obj.N_),...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','N_',...
               'source','String',...
               'fcn',@(val)round(str2double(val)),...
               'object',...
                  struct(...
                      'name','N_Slider',...
                      'prop','Value',...
                      'source','String',...
                      'fcn',@(val)round(str2double(val)))));
                   
                   
         uicontrol(obj.Figure_,...
            'Style','text',...
            'BackgroundColor',[0.25 0.25 0.25],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'String','Start:',...
            'Units','Normalized',...
            'Position',[0.21 0.15 0.04 0.10]);
         
         obj.Start_Slider = uicontrol(obj.Figure_,...
            'Style','slider',...
            'Max',1.0,...
            'Min',0.0,...
            'Value',obj.start_,...
            'SliderStep',[0.01 0.10],...
            'Units','Normalized',...
            'Position',[0.25 0.15 0.25 0.10],...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','start_',...
               'source','Value',...
               'fcn',@(val)val, ...
               'object',...
                  struct(...
                     'name','Start_Edit',...
                     'prop','String',...
                     'source','Value',...
                     'fcn',@(val)num2str(val))));
         obj.Start_Edit = uicontrol(obj.Figure_,...
            'Style','edit',...
            'BackgroundColor',[0.9 0.9 0.9],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'Units','Normalized',...
            'Position',[0.55 0.15 0.15 0.10],...
            'String',num2str(obj.start_),...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','start_',...
               'source','String',...
               'fcn',@(val)str2double(val),...
               'object',...
                  struct(...
                      'name','Start_Slider',...
                      'prop','Value',...
                      'source','String',...
                      'fcn',@(val)str2double(val))));
                   
         uicontrol(obj.Figure_,...
            'Style','text',...
            'BackgroundColor',[0.25 0.25 0.25],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'String','Rots:',...
            'Units','Normalized',...
            'Position',[0.21 0.25 0.04 0.10]);
         
         obj.Rots_Slider = uicontrol(obj.Figure_,...
            'Style','slider',...
            'Max',3,...
            'Min',-3,...
            'Value',obj.rots_,...
            'SliderStep',[0.01 0.10],...
            'Units','Normalized',...
            'Position',[0.25 0.25 0.25 0.15],...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','rots_',...
               'source','Value',...
               'fcn',@(val)val, ...
               'object',...
                  struct(...
                     'name','Rots_Edit',...
                     'prop','String',...
                     'source','Value',...
                     'fcn',@(val)num2str(val))));
         obj.Rots_Edit = uicontrol(obj.Figure_,...
            'Style','edit',...
            'BackgroundColor',[0.9 0.9 0.9],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'Units','Normalized',...
            'Position',[0.55 0.25 0.15 0.10],...
            'String',num2str(obj.rots_),...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','rots_',...
               'source','String',...
               'fcn',@(val)str2double(val),...
               'object',...
                  struct(...
                      'name','Rots_Slider',...
                      'prop','Value',...
                      'source','String',...
                      'fcn',@(val)str2double(val))));
                   
         uicontrol(obj.Figure_,...
            'Style','text',...
            'BackgroundColor',[0.25 0.25 0.25],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'String','Sat:',...
            'Units','Normalized',...
            'Position',[0.21 0.35 0.04 0.10]);
         
         obj.Sat_Slider = uicontrol(obj.Figure_,...
            'Style','slider',...
            'Max',2,...
            'Min',0.1,...
            'Value',obj.sat_,...
            'SliderStep',[0.01 0.10],...
            'Units','Normalized',...
            'Position',[0.25 0.35 0.25 0.15],...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','sat_',...
               'source','Value',...
               'fcn',@(val)val, ...
               'object',...
                  struct(...
                     'name','Sat_Edit',...
                     'prop','String',...
                     'source','Value',...
                     'fcn',@(val)num2str(val))));
         obj.Sat_Edit = uicontrol(obj.Figure_,...
            'Style','edit',...
            'BackgroundColor',[0.9 0.9 0.9],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'Units','Normalized',...
            'Position',[0.55 0.35 0.15 0.10],...
            'String',num2str(obj.sat_),...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','sat_',...
               'source','String',...
               'fcn',@(val)str2double(val),...
               'object',...
                  struct(...
                      'name','Sat_Slider',...
                      'prop','Value',...
                      'source','String',...
                      'fcn',@(val)str2double(val))));
         uicontrol(obj.Figure_,...
            'Style','text',...
            'BackgroundColor',[0.25 0.25 0.25],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'String','Gamma:',...
            'Units','Normalized',...
            'Position',[0.21 0.45 0.04 0.10]);
         
         obj.Gamma_Slider = uicontrol(obj.Figure_,...
            'Style','slider',...
            'Max',2,...
            'Min',0.1,...
            'Value',obj.gamma_,...
            'SliderStep',[0.01 0.10],...
            'Units','Normalized',...
            'Position',[0.25 0.45 0.25 0.15],...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','gamma_',...
               'source','Value',...
               'fcn',@(val)val, ...
               'object',...
                  struct(...
                     'name','Gamma_Edit',...
                     'prop','String',...
                     'source','Value',...
                     'fcn',@(val)num2str(val))));
         obj.Gamma_Edit = uicontrol(obj.Figure_,...
            'Style','edit',...
            'BackgroundColor',[0.9 0.9 0.9],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'Units','Normalized',...
            'Position',[0.55 0.45 0.15 0.10],...
            'String',num2str(obj.gamma_),...
            'Callback',@(src,~)obj.updateParam(src),...
            'UserData',struct(...
               'prop','gamma_',...
               'source','String',...
               'fcn',@(val)str2double(val),...
               'object',...
                  struct(...
                      'name','Gamma_Slider',...
                      'prop','Value',...
                      'source','String',...
                      'fcn',@(val)str2double(val))));
                   
                   
         % % Make edit boxes for iRange and Domain % %
         
         uicontrol(obj.Figure_,...
            'Style','text',...
            'BackgroundColor',[0.25 0.25 0.25],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'String','iRange [Low | High]:',...
            'Units','Normalized',...
            'Position',[0.70 0.15 0.095 0.10]);
         
         obj.IRange_Edit_Low = uicontrol(obj.Figure_,...
            'Style','edit',...
            'BackgroundColor',[0.9 0.9 0.9],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'Units','Normalized',...
            'Position',[0.80 0.15 0.095 0.10],...
            'String',num2str(obj.irange_(1)),...
            'Callback',@(src,~)obj.updateRange(src),...
            'UserData',struct(...
               'prop','irange_',...
               'index',1));
         obj.IRange_Edit_High = uicontrol(obj.Figure_,...
            'Style','edit',...
            'BackgroundColor',[0.9 0.9 0.9],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'Units','Normalized',...
            'Position',[0.90 0.15 0.095 0.10],...
            'String',num2str(obj.irange_(2)),...
            'Callback',@(src,~)obj.updateRange(src),...
            'UserData',struct(...
               'prop','irange_',...
               'index',2));
            
         
         uicontrol(obj.Figure_,...
            'Style','text',...
            'BackgroundColor',[0.25 0.25 0.25],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'String','Domain [Low | High]:',...
            'Units','Normalized',...
            'Position',[0.70 0.30 0.095 0.10]);
         obj.IRange_Edit_Low = uicontrol(obj.Figure_,...
            'Style','edit',...
            'BackgroundColor',[0.9 0.9 0.9],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'Units','Normalized',...
            'Position',[0.80 0.30 0.095 0.10],...
            'String',num2str(obj.domain_(1)),...
            'Callback',@(src,~)obj.updateRange(src),...
            'UserData',struct(...
               'prop','domain_',...
               'index',1));
         obj.IRange_Edit_High = uicontrol(obj.Figure_,...
            'Style','edit',...
            'BackgroundColor',[0.9 0.9 0.9],...
            'ForegroundColor','k',...
            'FontName','Arial',...
            'Units','Normalized',...
            'Position',[0.90 0.30 0.095 0.10],...
            'String',num2str(obj.domain_(2)),...
            'Callback',@(src,~)obj.updateRange(src),...
            'UserData',struct(...
               'prop','domain_',...
               'index',2));
            
         obj.BeingCreated = false;
      end
      
      function export(obj)
         %EXPORT Export colormap to base workspace and copy to clipboard
         %
         %  export(obj);
         %  -> Exports the variable `cm` to base workspace, which contains
         %     currently-displayed colormap matrix.
         %  -> Copies input arguments to gfx__.cubehelix() that recreate
         %     this colormap to the system clipboard (also prints them in
         %     Command Window).
         
         assignin('base','cm',obj.cm);
         expr = '[%3.2f %3.2f %3.2f %3.2f],[%3.2f %3.2f],[%3.2f %3.2f]';
         str = sprintf(expr,obj.start_,obj.rots_,obj.sat_,obj.gamma_,...
            obj.irange_,obj.domain_);
         clipboard('copy',str);
         fprintf(1,'Arguments copied to clipboard:\n');
         fprintf(1,'\t->\t<strong>%s</strong>\n',str);
         sounds__.play('pop',1.2,-10);
      end
      
      function update(obj,start,rots,sat,gamma,irange,domain)
         %UPDATE Update parameters using Command Window interface
         %
         %  update(obj,start,rots,sat,gamma,irange,domain);
         %  update(obj,[start,rots,sat,gamma],irange,domain);
         
         if nargin > 1
            if numel(start)==4
               obj.start_ = start(1);
               obj.rots_ = start(2);
               obj.sat_ = start(3);
               obj.gamma_ = start(4);
            else
               obj.start_ = start;
            end
         end
         if nargin > 2
            if numel(start) == 4
               obj.irange_ = rots;
            else
               obj.rots_ = rots;
            end
         end
         if nargin > 3
            if numel(start) == 4
               obj.domain_ = sat;
            else
               obj.sat_ = sat;
            end
         end
         if nargin > 4
            obj.gamma_ = gamma;
         end
         if nargin > 5
            obj.irange_ = irange;
         end
         if nargin > 6
            obj.domain_ = domain;
         end
         
         if obj.BeingCreated
            return;
         else
            % Otherwise, update associated graphics
            refresh(obj);
         end
      end
   end
   
   % Overloaded methods
   methods
      function delete(obj)
         %DELETE  Ensure that Figure is deleted if object is deleted
         if ~isempty(obj.Figure_)
            if isvalid(obj.Figure_)
               delete(obj.Figure_);
            end
         end
      end
      
      function value = get.cm(obj)
         value = squeeze(obj.CM_Image.CData);
      end
      
      function set.cm(obj,value)
         set(obj.CM_Image,...
            'CData',reshape(value,1,size(value,1),3),...
            'XData',1:size(value,1));
         set(get(obj.CM_Image,'Parent'),'XLim',[0.5 size(value,1)+0.5]);
      end
      
      function value = get.N(obj)
         value = obj.N_;
      end
      
      function set.N(obj,value)
         obj.N_ = value;
         args = {...
            value,...
            obj.start_,...
            obj.rots_,...
            obj.sat_,...
            obj.gamma_,...
            obj.irange_,...
            obj.domain_...
            };
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
      
      function value = get.start(obj)
         value = obj.start_;
      end
      
      function set.start(obj,value)
         obj.start_ = value;
         args = {...
            obj.N_,...
            value,...
            obj.rots_,...
            obj.sat_,...
            obj.gamma_,...
            obj.irange_,...
            obj.domain_...
            };
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
      
      function value = get.rots(obj)
         value = obj.rots_;
      end
      
      function set.rots(obj,value)
         obj.rots_ = value;
         args = {...
            obj.N_,...
            obj.start_,...
            value,...
            obj.sat_,...
            obj.gamma_,...
            obj.irange_,...
            obj.domain_...
            };
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
      
      function value = get.sat(obj)
         value = obj.sat_;
      end
      
      function set.sat(obj,value)
         obj.sat_ = value;
         args = {...
            obj.N_,...
            obj.start_,...
            obj.rots_,...
            value,...
            obj.gamma_,...
            obj.irange_,...
            obj.domain_...
            };
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
      
      function value = get.gamma(obj)
         value = obj.gamma_;
      end
      
      function set.gamma(obj,value)
         obj.gamma_ = value;
         args = {...
            obj.N_,...
            obj.start_,...
            obj.rots_,...
            obj.sat_,...
            value,...
            obj.irange_,...
            obj.domain_...
            };
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
      
      function value = get.irange(obj)
         value = obj.irange_;
      end
      
      function set.irange(obj,value)
         obj.irange_ = value;
         args = {...
            obj.N_,...
            obj.start_,...
            obj.rots_,...
            obj.sat_,...
            obj.gamma_,...
            value,...
            obj.domain_...
            };
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
      
      function value = get.domain(obj)
         value = obj.domain_;
      end
      
      function set.domain(obj,value)
         obj.domain_ = value;
         args = {...
            obj.N_,...
            obj.start_,...
            obj.rots_,...
            obj.sat_,...
            obj.gamma_,...
            obj.irange_,...
            value...
            };
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
   end
   
   % Hidden Public callback method
   methods (Hidden,Access=public)
      function refresh(obj)
         %REFRESH Refresh graphics to reflect parameter values
         %
         %  refresh(obj);
         
         % Update N
         obj.N_Slider.Value = obj.N_;
         obj.N_Edit.String = num2str(obj.N_);
         
         % Update Start
         obj.Start_Slider.Value = obj.start_;
         obj.Start_Edit.String = num2str(obj.start_);
         
         % Update Rots
         obj.Rots_Slider.Value = obj.rots_;
         obj.Rots_Edit.String = num2str(obj.rots_);
         
         % Update Sat
         obj.Sat_Slider.Value = obj.sat_;
         obj.Sat_Edit.String = num2str(obj.sat_);
         
         % Update Gamma
         obj.Gamma_Slider.Value = obj.gamma_;
         obj.Gamma_Edit.String = num2str(obj.gamma_);
         
         % Update IRange
         obj.IRange_Edit_Low.String = num2str(obj.irange_(1));
         obj.IRange_Edit_High.String = num2str(obj.irange_(2));
         
         % Update Domain
         obj.Domain_Edit_Low.String = num2str(obj.domain_(1));
         obj.Domain_Edit_High.String = num2str(obj.domain_(2));
         
         % And finally, update the colormap
         args = getArgs(obj);
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
      
      function updateParam(obj,src)
         %UPDATEPARAM  Update parameter depending on source
         
         u = src.UserData;
         obj.(u.prop) = feval(u.fcn,src.(u.source));
         obj.(u.object.name).(u.object.prop) = ...
            feval(u.object.fcn,src.(u.object.source));
         args = getArgs(obj);
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
      
      function updateRange(obj,src)
         %UPDATERANGE  Update iRange or Domain low or high value
         %
         %  updateRange(obj,src); % Used as callback
         
         u = src.UserData;
         obj.(u.prop)(u.index) = str2double(src.String);
         args = getArgs(obj);
         obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
      end
      
      function args = getArgs(obj)
         %GETARGS  Return cell array of arguments to static function
         %
         %  args = getArgs(obj);
         %  obj.cm = ui__.cubehelix_selector.new_cm_param(args{:});
         
         args = {...
            obj.N,...
            obj.start,...
            obj.rots,...
            obj.sat,...
            obj.gamma,...
            obj.irange,...
            obj.domain...
            };
      end
   end
   
   % Public static method recalculates cubehelix colormap
   methods (Static=true,Access=public)
      function cm = new_cm_param(N,start,rots,sat,gamma,irange,domain)
         %NEW_CM_PARAM  Return new colormap (called on cm param update)
         %
         %  cm = ui__.cubehelix_selector.new_cm_param(N,start,rots,sat,gamma,irange,domain);
         
         cm = gfx__.cubehelix(N,[start,rots,sat,gamma],irange,domain);
      end
   end
end